Всем привет. Сегодня мы с вами разберем что такое
контроллеры в Angular. В прошлом уроке мы с вами научились создавать Hello world приложение и разобрали что такое ng-model. В этом уроке мы разберем что такое контроллеры. Для того, чтобы отделить логику приложения от отображения данных в AngularJS придумали такую штуку как контроллеры.

Для начала давайте добавим ng-app, который раньше у нас был на диве к тегу html.

<html ng-app='app'>
Это значит, что наше приложение Angular будет называться app и все сущности мы будем привязывать к нему.

Кроме Angular у меня подключен файл main.js.

  <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.3.5/angular.min.js"></script>
  <script type="text/javascript" src="main.js"></script>
и мы в нем можем инициализировать наш app.

angular.module('app', []);
Теперь, если мы посмотрим в браузер, то у нас пустая страница и ничего нет. Все логично, потому что у нас никакого кода не написано. Если же мы, например, выведем здесь

<body>
  {{1 + 1}}
  <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.3.5/angular.min.js"></script>
  <script type="text/javascript" src="main.js"></script>
</body>
то у нас в браузере выведется 2. То есть все работает и Angular у нас правильно подключился.

Теперь давайте добавим контроллер. Для добавления контроллера нужно использовать тег ng-controller. Давайте создадим div, добавим ему атрибут ng-controller и назовем его myCtrl.

<body>
  <div ng-controller='myCtrl'></div>
  <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.3.5/angular.min.js"></script>
  <script type="text/javascript" src="main.js"></script>
</body>
Что такое контроллер? Когда мы указываем ng-controller то у нас создается новая область видимости. По английски это называется новый scope. Теперь мы можем делать какие-то действия конкретно внутри контроллера.

Теперь давайте опишем в main.js наш контроллер.

angular.module('app', []).controller('myCtrl', function () {
});
Только что мы создали самый простой контроллер. Мы можем в него что-то писать, но для того, чтобы мы могли вывести что-то на экран в шаблон, нам нужно использовать такую вещи как scope. Для этого мы в нашу функцию передаем $scope как первый параметр и внутри нее мы можем в эту переменную записывать какие-то новые проперти. Например

angular.module('app', []).controller('myCtrl', function ($scope) {
    $scope.hello = 55;
});
Теперь мы можем в шаблоне внутри нашего дива, к которому мы прицепили ng-controller вывести переменную hello.

<div ng-controller='myCtrl'>
    {{hello}}
</div>
Как мы видим у нас на экране вывелось 55. Еще раз: для того, чтобы вывести какие-то данные из контроллера нам необходим scope. Мы не можем вывести переменную пока она не будет в scope. Поэтому мы добавляем $scope как первый параметр в функции.

Опять же, если мы напишем {{hello}} ниже дива, то есть уже не в контроллере, то у нас ничего на экран не выведется, потому что Angular не знает что такое {{hello}} и не понимает что это мы написали.

Это очень удобно, потому что позволяет разделять информацию между контроллерами. Допустим, сейчас у нас контроллер myCtrl и внутри вся информация, которая относиться к нему. Если же мы хотим создать какой-то другой контроллер, который будет заниматься какими-то другими вещами, например, покупка товара, то мы создаем отдельный контроллер и будем держать всю информацию в нем.

Это позволяет разделять вывод данных в приложении от самой бизнес-логики.

Теперь давайте реализуем то, что мы делали в предыдущем уроке, но уже с контроллером.

<div ng-controller='myCtrl'>
    {{hello}}
    <input type='text' ng-model='myBook'>
</div>
Теперь мы можем в нашем контроллере добавить переменную myBook

angular.module('app', []).controller('myCtrl', function ($scope) {
    $scope.hello = 55;
    $scope.myBook = 'AngularJS';
});
И давайте сразу же ее здесь выведем.

<div ng-controller='myCtrl'>
    {{hello}}
    <input type='text' ng-model='myBook'>
    {{myBook}}
</div>
В браузере мы видим 55 и наш инпут в котором уже написано AngularJS, который мы задали в контроллере. Если мы поменяем проперти myBook в инпуте на EmberJS, то мы видим, что переменная меняется в контроллере соответственно. Т.е. изменение проперти в шаблоне, автоматом меняет ее в контроллере.

В принципе, это все что вам вначале нужно знать о контроллерах.